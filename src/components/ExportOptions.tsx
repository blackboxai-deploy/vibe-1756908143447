"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger,
  DropdownMenuSeparator 
} from '@/components/ui/dropdown-menu';

interface ProcessingResult {
  id: string;
  pages: Array<{
    pageNumber: number;
    extractedText: string;
    confidence: number;
  }>;
  fullText: string;
  metadata: {
    totalPages: number;
    processingTime: number;
    averageConfidence: number;
  };
}

interface ExportOptionsProps {
  result: ProcessingResult;
}

export default function ExportOptions({ result }: ExportOptionsProps) {
  const [isExporting, setIsExporting] = useState(false);

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const exportAsText = () => {
    setIsExporting(true);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const content = `OCR Text Extraction Results
Generated on: ${new Date().toLocaleString()}
Total Pages: ${result.metadata.totalPages}
Processing Time: ${result.metadata.processingTime}ms
Average Confidence: ${(result.metadata.averageConfidence * 100).toFixed(1)}%

==========================================
FULL TEXT CONTENT
==========================================

${result.fullText}

==========================================
PAGE-BY-PAGE BREAKDOWN
==========================================

${result.pages.map(page => 
  `--- PAGE ${page.pageNumber} (Confidence: ${(page.confidence * 100).toFixed(1)}%) ---
${page.extractedText}

`).join('')}`;

    downloadFile(content, `ocr-extraction-${timestamp}.txt`, 'text/plain');
    setIsExporting(false);
  };

  const exportAsJSON = () => {
    setIsExporting(true);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const jsonData = {
      exportDate: new Date().toISOString(),
      extractionId: result.id,
      metadata: result.metadata,
      fullText: result.fullText,
      pages: result.pages,
      exportInfo: {
        format: 'JSON',
        version: '1.0',
        generatedBy: 'OCR Text Extractor'
      }
    };

    downloadFile(
      JSON.stringify(jsonData, null, 2), 
      `ocr-extraction-${timestamp}.json`, 
      'application/json'
    );
    setIsExporting(false);
  };

  const exportAsMarkdown = () => {
    setIsExporting(true);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const content = `# OCR Text Extraction Results

**Generated on:** ${new Date().toLocaleString()}  
**Total Pages:** ${result.metadata.totalPages}  
**Processing Time:** ${result.metadata.processingTime}ms  
**Average Confidence:** ${(result.metadata.averageConfidence * 100).toFixed(1)}%  

---

## Full Text Content

${result.fullText.split('\n').map(line => line.trim()).filter(line => line.length > 0).join('\n\n')}

---

## Page-by-Page Breakdown

${result.pages.map(page => 
  `### Page ${page.pageNumber}
**Confidence Level:** ${(page.confidence * 100).toFixed(1)}%

${page.extractedText.split('\n').map(line => line.trim()).filter(line => line.length > 0).join('\n\n')}

---
`).join('')}

## Export Information

- **Format:** Markdown
- **Export Date:** ${new Date().toISOString()}
- **Generated By:** OCR Text Extractor
- **Extraction ID:** ${result.id}
`;

    downloadFile(content, `ocr-extraction-${timestamp}.md`, 'text/markdown');
    setIsExporting(false);
  };

  const exportAsCSV = () => {
    setIsExporting(true);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // Create CSV header
    const csvContent = [
      'Page Number,Confidence Level,Character Count,Word Count,Extracted Text',
      ...result.pages.map(page => {
        const cleanText = page.extractedText.replace(/"/g, '""').replace(/\n/g, ' ');
        const wordCount = page.extractedText.split(/\s+/).filter(word => word.length > 0).length;
        return `${page.pageNumber},"${(page.confidence * 100).toFixed(1)}%",${page.extractedText.length},${wordCount},"${cleanText}"`;
      })
    ].join('\n');

    downloadFile(csvContent, `ocr-extraction-${timestamp}.csv`, 'text/csv');
    setIsExporting(false);
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(result.fullText);
      // You could show a toast notification here
      alert('Text copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy text:', err);
      alert('Failed to copy text to clipboard');
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" disabled={isExporting}>
          {isExporting ? (
            <>
              <div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin mr-2" />
              Exporting...
            </>
          ) : (
            <>
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Export Results
            </>
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48">
        <DropdownMenuItem onClick={exportAsText}>
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Plain Text (.txt)
        </DropdownMenuItem>
        
        <DropdownMenuItem onClick={exportAsJSON}>
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
          </svg>
          Structured JSON (.json)
        </DropdownMenuItem>
        
        <DropdownMenuItem onClick={exportAsMarkdown}>
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
          </svg>
          Markdown (.md)
        </DropdownMenuItem>
        
        <DropdownMenuItem onClick={exportAsCSV}>
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Spreadsheet (.csv)
        </DropdownMenuItem>
        
        <DropdownMenuSeparator />
        
        <DropdownMenuItem onClick={copyToClipboard}>
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
          </svg>
          Copy to Clipboard
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}